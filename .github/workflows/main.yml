name: ðŸ”¬
on:
   push:
      branches:
         - '*'
         - '!test-ci'
      paths-ignore:
         - '**.md'
         - '.gitignore'
         - '.github/assets/**/**'
         - 'docs/**'
         - 'LICENSE'
jobs:
   test-node-os-coverage:
      name: Node ${{ matrix.node-version }} | ${{ matrix.os }}
      runs-on: ${{ matrix.os }}
      strategy:
         matrix:
            os: [ubuntu-latest]
            node-version: ['19', '18']
      if: ${{ !startsWith(github.event.head_commit.message, 'no-ci') }}
      steps:
         - name: âž• Actions - Checkout
           uses: actions/checkout@v3

         - name: âž• Actions - Setup NodeJS
           uses: actions/setup-node@v3
           with:
              node-version: ${{ matrix.node-version }}

         # - name: ðŸ“¥ Set Local FTP
         #   if: matrix.os == 'ubuntu-latest'
         #   run: docker run -d -p 21:21 -e FTP_USER=test -e FTP_PASS=test -e PASV_ADDRESS=127.0.0.1 bogem/ftp

         - name: ðŸ“¦ Upgrade to latest NPM version on latest Node.js
           if: matrix.node-version == '19'
           run: npm i npm@latest -g

         - name: ðŸ§ª Testing Services
           run: npm run test-services

   publish-npmjs:
      name: Publish Package to npmjs
      runs-on: ubuntu-latest
      needs: [test-node-os-coverage]
      if: github.ref == 'refs/heads/main' && startsWith(github.event.head_commit.message, 'v')
      steps:
         - name: âž• Actions - Checkout
           uses: actions/checkout@v3

         - name: âž• Actions - Setup NodeJS
           uses: actions/setup-node@v3
           with:
              node-version: '19'
              check-latest: true
              registry-url: 'https://registry.npmjs.org'

         - name: ðŸ“¥ Publishing Package
           run: npm publish
           env:
              NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
